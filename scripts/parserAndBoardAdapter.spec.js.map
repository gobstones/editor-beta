{"version":3,"sources":["scripts/parserAndBoardAdapter.spec.js"],"names":["describe","adapter","beforeEach","ParserAndBoardAdapter","parserModel","boardModel","c","it","expect","adaptToBoard","toEqual","adaptToParser","blue","red","black","green"],"mappings":";;AAAAA,SAAS,uBAAT,EAAkC,YAAW;;AAE3C,MAAIC,OAAJ;;AAEAC,aAAW,YAAW;AACpBD,cAAU,IAAIE,qBAAJ,EAAV;AACD,GAFD;;AAIAC,gBAAc,uBAAW;AACvB,WAAO,CACL,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CADK,EACa;AAClB,KAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAFK,EAEa;AAClB,KAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAHK,EAGa;AAClB,KAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAJK,CAIY;AAJZ,KAAP;AAMD,GAPD;;AASAC,eAAa,sBAAW;AACtB,WAAO,CACL,CAAEC,EAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAF,EAAiBA,EAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAjB,CADK,EAC6B;AAClC,KAAEA,EAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAF,EAAiBA,EAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAjB,CAFK,CAE6B;AAF7B,KAAP;AAID,GALD;;AAOAC,KAAG,8BAAH,EAAmC,YAAW;AAC5CC,WACEP,QAAQQ,YAAR,CAAqBL,aAArB,CADF,EAEEM,OAFF,CAEUL,YAFV;AAGD,GAJD;;AAMAE,KAAG,+BAAH,EAAoC,YAAW;AAC7CC,WACEP,QAAQU,aAAR,CAAsBN,YAAtB,CADF,EAEEK,OAFF,CAEUN,aAFV;AAGD,GAJD;;AAMAE,MAAI,WAASM,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;AACpC,WAAO,EAAEH,MAAMA,IAAR,EAAcC,KAAKA,GAAnB,EAAwBC,OAAOA,KAA/B,EAAsCC,OAAOA,KAA7C,EAAP;AACD,GAFD;AAID,CAxCD","file":"parserAndBoardAdapter.spec.js","sourcesContent":["describe('ParserAndBoardAdapter', function() {\n\n  var adapter;\n\n  beforeEach(function() {\n    adapter = new ParserAndBoardAdapter();\n  })\n\n  parserModel = function() {\n    return [\n      [[0, 3], [0, 0]], // blue  - columns - rows\n      [[0, 0], [0, 4]], // red   - columns - rows\n      [[1, 0], [0, 0]], // black - columns - rows\n      [[0, 0], [5, 0]] //  green - columns - rows\n    ];\n  };\n\n  boardModel = function() {\n    return [\n      [ c(3, 0, 0, 0), c(0, 4, 0, 0) ], // 2nd row - columns - colors\n      [ c(0, 0, 1, 0), c(0, 0, 0, 5) ]  // 1st row - columns - colors\n    ];\n  };\n\n  it(\"can adapt to the board model\", function() {\n    expect(\n      adapter.adaptToBoard(parserModel())\n    ).toEqual(boardModel());\n  });\n\n  it(\"can adapt to the parser model\", function() {\n    expect(\n      adapter.adaptToParser(boardModel())\n    ).toEqual(parserModel());\n  });\n\n  c = function(blue, red, black, green) {\n    return { blue: blue, red: red, black: black, green: green };\n  };\n\n});\n"]}