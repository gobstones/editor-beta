{"version":3,"sources":["scripts/parserAndBoardAdapter.js"],"names":["ParserAndBoardAdapter","table","mapColor","index","color","map","rows","amount","cell","blueColumns","redColumns","blackColumns","greenColumns","_","zipWith","merge","unzip","reverse","value","transposeOfTable","cloneDeep","unmapColor"],"mappings":";;;;;;IAAMA,qB;;;;;;;iCACSC,K,EAAO;AAClB,UAAMC,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAkB;AACjC,eAAOH,MAAME,KAAN,EAAaE,GAAb,CAAiB,UAACC,IAAD,EAAU;AAChC,iBAAOA,KAAKD,GAAL,CAAS,UAACE,MAAD,EAAY;AAC1B,gBAAIC,OAAO,EAAX;AACAA,iBAAKJ,KAAL,IAAcG,MAAd;AACA,mBAAOC,IAAP;AACD,WAJM,CAAP;AAKD,SANM,CAAP;AAOD,OARD;;AAUA,UAAMC,cAAcP,SAAS,CAAT,EAAY,MAAZ,CAApB;AACA,UAAMQ,aAAaR,SAAS,CAAT,EAAY,KAAZ,CAAnB;AACA,UAAMS,eAAeT,SAAS,CAAT,EAAY,OAAZ,CAArB;AACA,UAAMU,eAAeV,SAAS,CAAT,EAAY,OAAZ,CAArB;;AAEA,aAAOW,EAAEJ,WAAF,EACJK,OADI,CACIJ,UADJ,EACgBC,YADhB,EAC8BC,YAD9B,EAC4CC,EAAEE,KAD9C,EAEJC,KAFI,GAGJC,OAHI,GAIJC,KAJI,EAAP;AAKD;;;kCAEajB,K,EAAO;AACnB,UAAMkB,mBAAmBN,EAAEA,EAAEO,SAAF,CAAYnB,KAAZ,CAAF,EACtBgB,OADsB,GAEtBD,KAFsB,GAGtBE,KAHsB,EAAzB;;AAKA,UAAMG,aAAa,SAAbA,UAAa,CAACjB,KAAD,EAAW;AAC5B,eAAOe,iBAAiBd,GAAjB,CAAqB,UAACC,IAAD,EAAU;AACpC,iBAAOA,KAAKD,GAAL,CAAS,UAACG,IAAD,EAAU;AACxB,mBAAOA,KAAKJ,KAAL,CAAP;AACD,WAFM,CAAP;AAGD,SAJM,CAAP;AAKD,OAND;;AAQA,aAAO,CACLiB,WAAW,MAAX,CADK,EAELA,WAAW,KAAX,CAFK,EAGLA,WAAW,OAAX,CAHK,EAILA,WAAW,OAAX,CAJK,CAAP;AAMD","file":"parserAndBoardAdapter.js","sourcesContent":["class ParserAndBoardAdapter {\n  adaptToBoard(table) {\n    const mapColor = (index, color) => {\n      return table[index].map((rows) => {\n        return rows.map((amount) => {\n          var cell = {};\n          cell[color] = amount;\n          return cell;\n        });\n      });\n    };\n\n    const blueColumns = mapColor(0, \"blue\");\n    const redColumns = mapColor(1, \"red\");\n    const blackColumns = mapColor(2, \"black\");\n    const greenColumns = mapColor(3, \"green\");\n\n    return _(blueColumns)\n      .zipWith(redColumns, blackColumns, greenColumns, _.merge)\n      .unzip()\n      .reverse()\n      .value()\n  }\n\n  adaptToParser(table) {\n    const transposeOfTable = _(_.cloneDeep(table))\n      .reverse()\n      .unzip()\n      .value();\n\n    const unmapColor = (color) => {\n      return transposeOfTable.map((rows) => {\n        return rows.map((cell) => {\n          return cell[color];\n        });\n      });\n    }\n\n    return [\n      unmapColor(\"blue\"),\n      unmapColor(\"red\"),\n      unmapColor(\"black\"),\n      unmapColor(\"green\")\n    ]\n  }\n}\n"]}