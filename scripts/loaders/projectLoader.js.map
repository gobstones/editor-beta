{"version":3,"sources":["scripts/loaders/projectLoader.js"],"names":["ProjectLoader","loaders","CodeLoader","LibraryLoader","AttireLoader","context","files","map","loader","getFile","zip","JSZip","forEach","file","name","content","generateAsync","type","then","_saveBlob","getProjectName","event","callback","_readLocalFile","fileName","loadAsync","relativePath","zipEntry","_loadComponent","setProjectName","editor","setAsDirty","getContent","async","readIfNeeded","Loader"],"mappings":";;;;;;;;;;IAAMA,a;;;AACJ,2BAAc;AAAA;;AAAA;;AAGZ,UAAKC,OAAL,GAAe,CACb,IAAIC,UAAJ,EADa,EAEb,IAAIC,aAAJ,EAFa,EAGb,IAAIC,YAAJ,EAHa,CAAf;AAHY;AAQb;;;;yBAEIC,O,EAAS;AAAA;;AACZ,UAAIC,QAAQ,KAAKL,OAAL,CAAaM,GAAb,CAAiB;AAAA,eAAUC,OAAOC,OAAP,CAAeJ,OAAf,CAAV;AAAA,OAAjB,CAAZ;;AAEA,UAAMK,MAAM,IAAIC,KAAJ,EAAZ;AACAL,YAAMM,OAAN,CAAc,gBAAQ;AACpBF,YAAIG,IAAJ,CAASA,KAAKC,IAAd,EAAoBD,KAAKE,OAAzB;AACD,OAFD;;AAIAL,UAAIM,aAAJ,CAAkB,EAAEC,MAAM,MAAR,EAAlB,EAAoCC,IAApC,CAAyC,mBAAW;AAClD,eAAKC,SAAL,CAAeJ,OAAf,EAA2BV,QAAQe,cAAR,EAA3B;AACD,OAFD;AAGD;;;yBAEIf,O,EAASgB,K,EAAOC,Q,EAAU;AAAA;;AAAA,2BACF,KAAKC,cAAL,CAAoBF,KAApB,CADE;AAAA,UACrBR,IADqB,kBACrBA,IADqB;AAAA,UACfW,QADe,kBACfA,QADe;;AAG7Bb,YAAMc,SAAN,CAAgBZ,IAAhB,EAAsBK,IAAtB,CAA2B,eAAO;AAChCR,YAAIE,OAAJ,CAAY,UAACc,YAAD,EAAeC,QAAf,EAA4B;AACtC,iBAAKC,cAAL,CAAoBvB,OAApB,EAA6BqB,YAA7B,EAA2CC,QAA3C;AACD,SAFD;;AAIAtB,gBAAQwB,cAAR,CAAuBL,QAAvB;AACAnB,gBAAQyB,MAAR,CAAeC,UAAf;AACAT;AACD,OARD;AASD;;;mCAEcjB,O,EAASqB,Y,EAAcC,Q,EAAU;AAC9C,WAAK1B,OAAL,CAAaW,OAAb,CAAqB,kBAAU;AAC7B,YAAMoB,aAAa,SAAbA,UAAa;AAAA,iBAAML,SAASM,KAAT,CAAe,QAAf,CAAN;AAAA,SAAnB;AACAzB,eAAO0B,YAAP,CAAoB7B,OAApB,EAA6BqB,YAA7B,EAA2CM,UAA3C;AACD,OAHD;AAID;;;;EA3CyBG,M","file":"projectLoader.js","sourcesContent":["class ProjectLoader extends Loader {\n  constructor() {\n    super();\n\n    this.loaders = [\n      new CodeLoader,\n      new LibraryLoader,\n      new AttireLoader\n    ];\n  }\n\n  save(context) {\n    var files = this.loaders.map(loader => loader.getFile(context));\n\n    const zip = new JSZip();\n    files.forEach(file => {\n      zip.file(file.name, file.content);\n    });\n\n    zip.generateAsync({ type: \"blob\" }).then(content => {\n      this._saveBlob(content, `${context.getProjectName()}.gbp`);\n    });\n  }\n\n  read(context, event, callback) {\n    const { file, fileName } = this._readLocalFile(event);\n\n    JSZip.loadAsync(file).then(zip => {\n      zip.forEach((relativePath, zipEntry) => {\n        this._loadComponent(context, relativePath, zipEntry);\n      });\n\n      context.setProjectName(fileName);\n      context.editor.setAsDirty();\n      callback();\n    });\n  }\n\n  _loadComponent(context, relativePath, zipEntry) {\n    this.loaders.forEach(loader => {\n      const getContent = () => zipEntry.async(\"string\");\n      loader.readIfNeeded(context, relativePath, getContent);\n    });\n  }\n}\n"]}