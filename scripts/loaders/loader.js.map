{"version":3,"sources":["scripts/loaders/loader.js"],"names":["Loader","context","_saveText","getFile","event","callback","_readText","content","fileName","_clean","readContent","path","getContent","_","endsWith","SUFFIX","then","readContentForProject","code","mode","editor","setCode","onRunCode","_setCode","_runCode","name","getProjectName","_saveBlob","Blob","type","blob","a","document","createElement","href","URL","createObjectURL","download","click","_readLocalFile","file","reader","FileReader","onload","result","readAsText","first","target","files","split","value"],"mappings":";;;;;;IAAMA,M;;;;;;;yBACCC,O,EAAS;AACZ,WAAKC,SAAL,CAAe,KAAKC,OAAL,CAAaF,OAAb,CAAf;AACD;;;yBAEIA,O,EAASG,K,EAAOC,Q,EAAU;AAAA;;AAC7B,WAAKC,SAAL,CAAeF,KAAf,EAAsB,UAACG,OAAD,EAAUC,QAAV,EAAuB;AAC3C,YAAI,CAACD,OAAD,IAAY,CAACC,QAAjB,EACE,OAAO,MAAKC,MAAL,CAAYL,KAAZ,CAAP;;AAEF,cAAKM,WAAL,CAAiBT,OAAjB,EAA0BM,OAA1B,EAAmCC,QAAnC;AACAH;AACD,OAND;AAOD;;;iCAEYJ,O,EAASU,I,EAAMC,U,EAAY;AAAA;;AACtC,UAAIC,EAAEC,QAAF,CAAWH,IAAX,EAAiB,KAAKI,MAAtB,CAAJ,EAAmC;AACjCH,qBAAaI,IAAb,CAAkB,mBAAW;AAC3B,iBAAKC,qBAAL,CAA2BhB,OAA3B,EAAoCM,OAApC;AACD,SAFD;AAGD;AACF;;;0CAEqBN,O,EAASM,O,EAAS;AACtC,WAAKG,WAAL,CAAiBT,OAAjB,EAA0BM,OAA1B;AACD;;AAED;AACA;AACA;;;;6BAESN,O,EAASiB,I,EAAMC,I,EAAM;AAC5BlB,cAAQmB,MAAR,CAAeC,OAAf,CAAuBH,IAAvB,EAA6BC,IAA7B;AACD;;;6BAEQlB,O,EAAS;AAChBA,cAAQmB,MAAR,CAAeE,SAAf;AACD;;;mCAEcrB,O,EAASiB,I,EAAMC,I,EAAM;AAClC,WAAKI,QAAL,CAActB,OAAd,EAAuBiB,IAAvB,EAA6BC,IAA7B;AACA,WAAKK,QAAL;AACD;;;6BAEQvB,O,EAASM,O,EAAS;AACzB,aAAO;AACLA,iBAASA,OADJ;AAELkB,cAAMxB,QAAQyB,cAAR,KAA2B,KAAKX;AAFjC,OAAP;AAID;;;oCAE4B;AAAA,UAAjBR,OAAiB,QAAjBA,OAAiB;AAAA,UAARkB,IAAQ,QAARA,IAAQ;;AAC3B,WAAKE,SAAL,CAAe,IAAIC,IAAJ,CAAS,CAACrB,OAAD,CAAT,EAAoB,EAAEsB,MAAM,YAAR,EAApB,CAAf,EAA4DJ,IAA5D;AACD;;;8BAESK,I,EAAML,I,EAAM;AACpB,UAAMM,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAV;AACAF,QAAEG,IAAF,GAASC,IAAIC,eAAJ,CAAoBN,IAApB,CAAT;AACAC,QAAEM,QAAF,GAAaZ,IAAb;AACAM,QAAEO,KAAF;AACD;;;8BAESlC,K,EAAOC,Q,EAAU;AAAA,4BACE,KAAKkC,cAAL,CAAoBnC,KAApB,CADF;AAAA,UACjBoC,IADiB,mBACjBA,IADiB;AAAA,UACXhC,QADW,mBACXA,QADW;;AAGzB,UAAMiC,SAAS,IAAIC,UAAJ,EAAf;AACAD,aAAOE,MAAP,GAAgB,YAAU;AACxB,YAAMpC,UAAUkC,OAAOG,MAAvB;AACAvC,iBAASE,OAAT,EAAkBC,QAAlB;AACD,OAHD;AAIAiC,aAAOI,UAAP,CAAkBL,IAAlB;AACD;;;mCAEcpC,K,EAAO;AACpB,UAAMoC,OAAO3B,EAAEiC,KAAF,CAAQ1C,MAAM2C,MAAN,CAAaC,KAArB,CAAb;AACA,UAAMxC,WAAWK,EAAEiC,KAAF,CAAQN,KAAKf,IAAL,CAAUwB,KAAV,CAAgB,GAAhB,CAAR,CAAjB;;AAEA,WAAKxC,MAAL,CAAYL,KAAZ;AACA,aAAO,EAAEoC,MAAMA,IAAR,EAAchC,UAAUA,QAAxB,EAAP;AACD;;;2BAEMJ,K,EAAO;AACZA,YAAM2C,MAAN,CAAaG,KAAb,GAAqB,IAArB;AACD","file":"loader.js","sourcesContent":["class Loader {\n  save(context) {\n    this._saveText(this.getFile(context));\n  }\n\n  read(context, event, callback) {\n    this._readText(event, (content, fileName) => {\n      if (!content || !fileName)\n        return this._clean(event);\n\n      this.readContent(context, content, fileName);\n      callback();\n    });\n  }\n\n  readIfNeeded(context, path, getContent) {\n    if (_.endsWith(path, this.SUFFIX)) {\n      getContent().then(content => {\n        this.readContentForProject(context, content);\n      });\n    }\n  }\n\n  readContentForProject(context, content) {\n    this.readContent(context, content);\n  }\n\n  // SUFFIX; <<abstract>>\n  // getFile(context); <<abstract>>\n  // readContent(context, content, fileName); <<abstract>>\n\n  _setCode(context, code, mode) {\n    context.editor.setCode(code, mode);\n  }\n\n  _runCode(context) {\n    context.editor.onRunCode();\n  }\n\n  _setAndRunCode(context, code, mode) {\n    this._setCode(context, code, mode);\n    this._runCode();\n  }\n\n  _getFile(context, content) {\n    return {\n      content: content,\n      name: context.getProjectName() + this.SUFFIX\n    };\n  }\n\n  _saveText({ content, name }) {\n    this._saveBlob(new Blob([content], { type: \"text/plain\" }), name);\n  }\n\n  _saveBlob(blob, name) {\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = name;\n    a.click();\n  }\n\n  _readText(event, callback) {\n    const { file, fileName } = this._readLocalFile(event);\n\n    const reader = new FileReader();\n    reader.onload = function(){\n      const content = reader.result;\n      callback(content, fileName);\n    };\n    reader.readAsText(file);\n  }\n\n  _readLocalFile(event) {\n    const file = _.first(event.target.files);\n    const fileName = _.first(file.name.split(\".\"));\n\n    this._clean(event);\n    return { file: file, fileName: fileName };\n  }\n\n  _clean(event) {\n    event.target.value = null;\n  }\n}\n"]}