{"version":3,"sources":["scripts/stylist.js"],"names":["Stylist","DEFAULT_PERCENTAGE","TOOLBAR_HEIGHT","TOOLBAR_AND_SIZE_SELECTOR_HEIGHT","CELL_SIZE","BOARD_CSS_CLASS","BOARD_CONTAINER_CSS_CLASS","BOARD_CONTAINER_OFFSET","BOARD_CONTAINER_VERTICAL_MARGIN","LEFT_PANEL_CSS_CLASS","editor","lineHeight","renderer","availableLines","$","document","height","setOption","boardDimensions","ready","_makeResizable","setTimeout","hide","updateBoardSize","window","resize","_beResponsive","_saveBoardSize","percentage","_keepAspectRatioOnWindowResize","_scaleAndCenterBoard","documentWidth","width","lastDocumentWidth","_getPercentage","leftPanel","scale","_getScale","css","_centerBoard","applyMargin","x","m","b","middleY","_getRightPanelHeight","offsetY","currentBoardHeight","y","panelWidth","_getRightPanelWidth","middleX","offsetX","currentBoardWidth","resizable","resizeHeight","boardSize","_getBoardSize","scaleX","panelHeight","scaleY","Math","max","min"],"mappings":"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","file":"stylist.js","sourcesContent":["class Stylist {\n  constructor() {\n    this.DEFAULT_PERCENTAGE = 0.6;\n    this.TOOLBAR_HEIGHT = 64;\n    this.TOOLBAR_AND_SIZE_SELECTOR_HEIGHT = this.TOOLBAR_HEIGHT + 78;\n    this.CELL_SIZE = 59;\n    this.BOARD_CSS_CLASS = \".theBoard\";\n    this.BOARD_CONTAINER_CSS_CLASS = \".theBoardContainer\";\n    this.BOARD_CONTAINER_OFFSET = 8;\n    this.BOARD_CONTAINER_VERTICAL_MARGIN = 50;\n    this.LEFT_PANEL_CSS_CLASS = \".panel-left\";\n  }\n\n  correctEditorHeight(editor) {\n    const lineHeight = editor.renderer.lineHeight;\n    const availableLines = ($(document).height() - this.TOOLBAR_HEIGHT) / editor.renderer.lineHeight;\n\n    editor.setOption(\"minLines\", availableLines);\n    editor.setOption(\"maxLines\", availableLines);\n  }\n\n  setPanelAsResizable(boardDimensions) {\n    $(document).ready(() => {\n      this._makeResizable();\n      setTimeout(() => {\n        $(`${this.LEFT_PANEL_CSS_CLASS} .ui-resizable-s`).hide();\n        $(`${this.LEFT_PANEL_CSS_CLASS} .ui-resizable-se`).hide();\n\n        this.updateBoardSize(boardDimensions);\n      }, 0);\n    });\n\n    $(window).resize(() => {\n      this._beResponsive();\n    });\n  }\n\n  updateBoardSize(boardDimensions) {\n    this._saveBoardSize(boardDimensions);\n    this._beResponsive();\n  }\n\n  _beResponsive() {\n    var percentage = this._keepAspectRatioOnWindowResize(this.LEFT_PANEL_CSS_CLASS);\n    this._scaleAndCenterBoard(percentage);\n  }\n\n  _keepAspectRatioOnWindowResize() {\n    const documentWidth = $(document).width()\n    if (!this.lastDocumentWidth) {\n      this.lastDocumentWidth = documentWidth;\n      return this.DEFAULT_PERCENTAGE;\n    }\n\n    const percentage = this._getPercentage();\n\n    const leftPanel = $(this.LEFT_PANEL_CSS_CLASS);\n    leftPanel.width(documentWidth * percentage);\n    this.lastDocumentWidth = documentWidth;\n\n    return percentage;\n  }\n\n  _scaleAndCenterBoard(percentage) {\n    const scale = this._getScale(percentage);\n    $(this.BOARD_CSS_CLASS).css(\"transform\", `scale(${scale})`);\n    this._centerBoard(percentage, scale);\n  }\n\n  _centerBoard(percentage, scale) {\n    const applyMargin = (x, m, b) => - (m*x + b) * this.CELL_SIZE * scale;\n\n    // center vertically\n    const middleY = (this._getRightPanelHeight()) / 2;\n    const offsetY = this.currentBoardHeight / 2 + applyMargin(this.boardDimensions.y, 0.111561862, -0.111561862);\n    $(this.BOARD_CSS_CLASS).css(\"margin-top\", `${middleY - offsetY}px`);\n\n    // center horizontally\n    $(\".theBoardContainer\").width(0); // avoid increasing container width\n    const panelWidth = this._getRightPanelWidth(percentage);\n    const middleX = panelWidth / 2;\n    const offsetX = this.BOARD_CONTAINER_OFFSET + (this.currentBoardWidth * scale) / 2 + applyMargin(this.boardDimensions.x, -0.000975862, 0.131475862);\n\n    $(this.BOARD_CONTAINER_CSS_CLASS).css(\"margin-left\", `${middleX - offsetX}px`);\n  }\n\n  _makeResizable() {\n    $(this.LEFT_PANEL_CSS_CLASS).resizable({\n      resizeHeight: false\n    });\n  }\n\n  _saveBoardSize(boardDimensions) {\n    const boardSize = this._getBoardSize(boardDimensions);\n    this.currentBoardWidth = boardSize.width;\n    this.currentBoardHeight = boardSize.height;\n    this.boardDimensions = boardDimensions;\n  }\n\n  _getBoardSize(boardDimensions) {\n    return {\n      width: 39 + boardDimensions.x * this.CELL_SIZE,\n      height: 39 + boardDimensions.y * this.CELL_SIZE\n    };\n  }\n\n  _getPercentage() {\n    const leftPanel = $(this.LEFT_PANEL_CSS_CLASS);\n    return leftPanel.width() / this.lastDocumentWidth;\n  }\n\n  _getRightPanelWidth(percentage) {\n    return $(document).width() * (1 - percentage);\n  }\n\n  _getRightPanelHeight() {\n    return $(document).height() - this.TOOLBAR_AND_SIZE_SELECTOR_HEIGHT - this.BOARD_CONTAINER_VERTICAL_MARGIN;\n  }\n\n  _getScale(percentage) {\n    const panelWidth = this._getRightPanelWidth(percentage);\n    const scaleX = panelWidth / this.currentBoardWidth;\n\n    const panelHeight = this._getRightPanelHeight();\n    const scaleY = panelHeight / this.currentBoardHeight;\n\n    return Math.max(Math.min(scaleX, scaleY), 0);\n  }\n}\n"]}